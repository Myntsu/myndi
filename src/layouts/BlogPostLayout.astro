---
// component import
import MainLayout from "../layouts/MainLayout.astro";
import PostHeader from "../components/PostHeader.astro";
import CategoryCloud from "../components/CategoryCloud.astro";
import RelatedPosts from "../components/RelatedPosts.astro";
import TableOfContents from '../components/table-of-content/TableOfContents.astro';
import '../css/blogpost.scss';

// utils imports
import { formatBlogPosts } from "../scripts/utils";

const { frontmatter, headings } = Astro.props;
const { title, description, date, category, author, image } = frontmatter;

const allPosts = await Astro.glob("../pages/blog/*.md");
const formattedPosts = formatBlogPosts(allPosts, {
  sortByDate: false,
});

const relatedPosts = formattedPosts
  .filter(
    (post) =>
      post.frontmatter.category.toLowerCase() === category.toLowerCase() &&
      post.frontmatter.title !== title
  )
  .slice(0, 3);
---

<MainLayout
  {title}
  {description}
  image={frontmatter.image}
  {frontmatter}
  robots={frontmatter.robots}>
  <PostHeader
    {title}
    {description}
    {date}
    {category}
    {author}
    {image}
  />
  <div class="blog-section">
    <section>
      <div id="blog-post">
        <slot />
      </div>
    </section>
    <div class="aside-group">
      <TableOfContents headings={headings} />
      <aside aria-label="Blog Categories">
        <h2>Blog Categories</h2>
        <CategoryCloud
          categoryClasses="flex-list"
          classes="tag tag-button"
        />
      </aside>
      {
        relatedPosts.length > 0 && (
          <aside aria-label="Related posts">
            <h2>Related posts</h2>
            <RelatedPosts {relatedPosts} />
          </aside>
        )
      }
    </div>
  </div>
</MainLayout>

<style lang="scss">
  html {
    scroll-behavior: smooth;
    scroll-padding-block-start: 1rem;
  }

  .blog-section {
    display: flex;
    flex-wrap: wrap;
    line-height: 1.6;

    & > section {
      flex: 3 0 min(450px, 100%);
    }

    & > .aside-group {
      position: sticky;
      top: 0;
      flex: 1 0 200px;
      align-self: flex-start;
    }
  }

  aside {
    padding: var(--rem-lg);
  }
</style>

<script lang="js">
const headers = document.querySelectorAll('h2, h3, h4, h5, h6');
const tocAnchors = document.querySelectorAll('.toc a');
let currentInView = null;

const observer = new IntersectionObserver((entries) => {
  const entry = entries.filter(e => e.isIntersecting).pop();

  if (entry) {
    const id = entry.target.getAttribute('id');
    const anchor = Array.from(tocAnchors).find(a => a.getAttribute('href') === `#${id}`);

    if (anchor) {
      if (currentInView) {
        currentInView.classList.remove('in-view');
      }
      anchor.classList.add('in-view');
      currentInView = anchor;
    }
  }
}, { 
  threshold: 0.1,
  rootMargin: '-50px 0px -50px 0px' // Adjust as needed
});

headers.forEach(header => observer.observe(header));

</script>