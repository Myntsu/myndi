---
// component import
import MainLayout from "../layouts/MainLayout.astro";
import PostHeader from "../components/PostHeader.astro";
import CategoryCloud from "../components/CategoryCloud.astro";
import RelatedPosts from "../components/RelatedPosts.astro";
import TableOfContents from '../components/table-of-content/TableOfContents.astro';
import '../css/blogpost.scss';

// utils imports
import { formatBlogPosts } from "../scripts/utils";

const { frontmatter, headings } = Astro.props;
const { title, description, date, category, author, image } = frontmatter;

const allPosts = await Astro.glob("../pages/blog/*.md");
const formattedPosts = formatBlogPosts(allPosts, {
  sortByDate: false,
});

const relatedPosts = formattedPosts
  .filter(
    (post) =>
      post.frontmatter.category.toLowerCase() === category.toLowerCase() &&
      post.frontmatter.title !== title
  )
  .slice(0, 3);
---

<MainLayout
  {title}
  {description}
  image={frontmatter.image}
  {frontmatter}
  robots={frontmatter.robots}>
  <PostHeader
    {title}
    {description}
    {date}
    {category}
    {author}
    {image}
  />
  <div class="blog-section">
    <section>
      <div id="blog-post">
        <slot />
      </div>
    </section>
    <div class="aside-group">
      <TableOfContents headings={headings} />

      <aside aria-label="Blog Categories">
        <h2>Blog Categories</h2>
        <CategoryCloud
          categoryClasses="flex-list"
          classes="tag tag-button"
        />
      </aside>
      {
        relatedPosts.length > 0 && (
          <aside aria-label="Related posts">
            <h2>Related posts</h2>
            <RelatedPosts {relatedPosts} />
          </aside>
        )
      }
    </div>
  </div>
</MainLayout>

<style lang="scss">
  html {
    scroll-behavior: smooth;
    scroll-padding-block-start: 1rem;
  }

  .blog-section {
    display: flex;
    flex-wrap: wrap;
    line-height: 1.6;

    & > section {
      flex: 3 0 min(450px, 100%);
    }

    & > .aside-group {
      flex: 1 0 200px;

      position: sticky;
      height: 100%;
    }
  }

  aside {
    padding: var(--rem-lg);
  }
</style>

<script>
  function highlightLinks() {
    const h2s = document.getElementsByTagName('h2');
    for (let i = 0; i < h2s.length; i++) {
        const links = h2s[i].getElementsByTagName('a');
        for (let j = 0; j < links.length; j++) {
            if (links[j].getAttribute('href') === h2s[i].textContent) {
                links[j].classList.add('text-highlight');
            }
        }
    }
}
highlightLinks();

</script>