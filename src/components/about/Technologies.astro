---
import { Icon } from "astro-icon";

import type { HTMLAttributes } from "astro/types";

interface Stack {
  language?: string;
  name?: string;
  percentage?: number;
  color?: string;
}

interface Props extends HTMLAttributes<"div"> {
  stack?: {
    frontEnd: Stack[];
    backEnd: Stack[];
    devOps: Stack[];
    tools: Stack[];
  }[];
}

const { stack } = Astro.props;
const { frontEnd, backEnd, devOps, tools } = stack[0];
---

<div class="stack">
  {
    frontEnd && (
      <div class="sub-stack">
        <h3>Front-end development</h3>
        <div class="list">
          {frontEnd?.map(({ name, language, percentage, color }) => (
            <div class="stack-container">
              <Icon name={`mdi:${name}`} />
              <div class={`bar ${color}`}>
                <span>{language}</span>
                <div class="fill">
                  <span class="percentage">{percentage}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }
  {
    backEnd && (
      <div class="sub-stack">
        <h3>Back-end development</h3>
        <div class="list">
          {backEnd?.map(({ name, language, percentage, color }) => (
            <div class="stack-container">
              <Icon name={`mdi:${name}`} />
              <div class={`bar ${color}`}>
                <span>{language}</span>
                <div class="fill">
                  <span class="percentage">{percentage}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }
  {
    devOps && (
      <div class="sub-stack">
        <h3>Dev-ops</h3>
        <div class="list">
          {devOps?.map(({ name, language, percentage, color }) => (
            <div class="stack-container">
              <Icon name={`mdi:${name}`} />
              <div class={`bar ${color}`}>
                <span>{language}</span>
                <div class="fill">
                  <span class="percentage">{percentage}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }
  {
    tools && (
      <div class="sub-stack">
        <h3>Tools</h3>
        <div class="list">
          {tools?.map(({ name, language, percentage, color }) => (
            <div class="stack-container">
              <Icon name={`mdi:${name}`} />
              <div class={`bar ${color}`}>
                <span>{language}</span>
                <div class="fill">
                  <span class="percentage">{percentage}%</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }
</div>

<style lang="scss">
  .stack {
    --h: 0;
    --s: 100%;
    --l: 70%;
    --svg-size: 40px;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(400px, 100%), 1fr));

    .sub-stack {

      padding: var(--rem-lg);
      border-radius: var(--rem-xs);

      @media (max-width: 970px) {
        padding-inline-start: 0;
      }

      &:is(:hover) {
        @media (min-width: 970px) {
          background-color: hsl(var(--font) / .05);
        }
      }
      .list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(min(200px, 100%), 1fr));
        gap: var(--rem-lg);

        .stack-container {
          display: flex;
          align-items: center;
          gap: var(--rem-sm);

          svg {
            width: var(--svg-size);
            aspect-ratio: 1;
          }

          .bar {
            width: 100%;
            height: calc(var(--svg-size) / 2);
            border: 1px solid hsl(var(--h) var(--s) var(--l));
            user-select: none;

            &.red {
              --h: 0;
            }

            &.blue {
              --h: 220;
            }

            &.yellow {
              --h: 65;
            }

            &.orange {
              --h: 30;
            }

            &.green {
              --h: 120;
            }

            &.pink {
              --h: 340;
            }

            &.purple {
              --h: 270;
            }

            position: relative;

            &.darker {
              --s: 70% !important;
              --l: 45% !important;
            }

            &.lighter {
              --s: 65% !important;
              --l: 75% !important;
            }

            &:is(:hover) {
              opacity: 0.9;

              outline: 1px solid hsl(var(--font) / 0.5);
              outline-offset: 2px;

              box-shadow: 3px 3px 10px hsl(var(--font) / 0.2);

              .percentage {
                font-size: 3rem;
              }
            }

            & > span {
              position: absolute;
              top: calc(-1 * var(--svg-size) / 2);
              font-size: 0.875rem;
              text-transform: capitalize;
            }

            .fill {
              display: flex;
              align-items: center;

              width: 0%;
              height: 100%;
              background-color: hsl(var(--h) var(--s) var(--l));

              .percentage {
                display: block;
                margin-inline-start: auto;
                padding-inline-end: var(--rem-sm);
                color: hsl(0 0% 0%);
                font-size: 12px;
                line-height: 0;
                z-index: 2;
              }
            }
          }
        }
      }
    }
  }
</style>

<script>
  import "../../scripts/technologies.js";
</script>
