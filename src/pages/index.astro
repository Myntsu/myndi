---
// component imports
import MainLayout from "../layouts/MainLayout.astro";
import PostCard from "../components/PostCard.astro";

// utils imports
import { formatBlogPosts } from "../scripts/utils";
import CardsContainer from "../components/utility/CardsContainer.astro";
import Link from "../components/utility/Link.astro";

const allPosts = await Astro.glob("./blog/*.md");
const formattedPosts = formatBlogPosts(allPosts, {
  limit: 2,
});
---

<MainLayout
  title="Home"
  description="Landing page of Myndi's page">
  <section
    id="home"
    aria-label="About Me">
    <div>
      <h1>
        Welcome <span
          class="pick-name"
          data-pick-name>
          <span data-underscore>_</span>
          <span data-underscore>_</span>
          <span data-underscore>_</span>
          <span data-underscore>_</span>
          <span data-underscore>_</span>
        </span>
        <span>ðŸ‘‹</span>
      </h1>

      <p>
        I'm known as <span class="highlight-text">Myndi</span>, a Front-end
        Developer that focuses on UX/UI, aesthetics and "clean code" ðŸ˜Š
      </p>
      <p>
        I have built this blogfolio to present myself to the world, and to help
        people <span class="highlight-text">build their own</span>, if you're
        interested, please check the <Link
          href="https://github.com/Myntsu/myndi"
          target="blank"
          external>
          Repository
        </Link> or simply start your own copy with:
      </p>
      <pre>
          <code>
# npm 6.x
npm create astro@latest --template Myntsu/myndi

# npm 7+
npm create astro@latest -- --template Myntsu/myndi

#pnpm
pnpm create astro@latest --template Myntsu/myndi

# yarn
yarn create astro --template Myntsu/myndi</code>
        </pre>
    </div>
  </section>
  <section aria-label="Newest blog posts">
    <h2>Latest blog posts</h2>
    <CardsContainer>
      {
        formattedPosts.map((post) => (
          <PostCard
            frontmatter={post.frontmatter}
            url={post.url}
            tagType="h3"
          />
        ))
      }
    </CardsContainer>
  </section>
</MainLayout>

<style lang="scss">
  #home {
    min-height: 50vh;
    min-height: 50svh;
  }

  pre {
    padding: 0 !important;
    padding-inline: 1.5rem !important;
    color: hsl(0 0% 91%);
    background-color: hsl(0 0% 7%);
    overflow-x: auto;
  }

  .pick-name {
    display: inline-flex;
    gap: 0.5rem;
    cursor: pointer;

    &:is(:hover, :focus-visible) {
      & > * {
        animation: none !important;
      }
    }

    &:is(.active) {
      min-width: 10ch;
      line-height: 1;
      box-shadow: 0 0 20px hsl(var(--highlight) / .6);
      border-radius: .5rem;
      font-size: 1.5rem;
      padding: .5rem;
      cursor: text;
    }
  }

  [contenteditable="true"] {
    line-height: 1;
  }

  $animation: 3000ms;
  $totalChilds: 5;
  $delay: calc($animation / $totalChilds);

  @for $i from 1 through 5 {
    .pick-name > :nth-child(#{$i}) {
      position: relative;
      animation: jump $animation infinite;
      animation-delay: calc(#{$i} * #{$delay});
    }
  }

  @keyframes jump {
    50% {
      translate: 0px -10px;
    }
  }
</style>

<script lang="js">
const pickName = document.querySelector(".pick-name");
const pickNameSpans = pickName.querySelectorAll("[data-underscore]");

pickName.addEventListener("click", () => {
  pickNameSpans.forEach((span) => (span.style.display = "none"));
  pickName.classList.add("active");
  pickName.contentEditable = true;
});

pickName.addEventListener("input", () => {
  const name = pickName.textContent.replace(/_/g, "").trim();
  if (name.length > 20) {
      pickName.textContent = name.slice(0, 20);
    }
    localStorage.setItem("pickName", name);
  });

  pickName.addEventListener("blur", () => {
    pickName.classList.remove("active");
    pickName.contentEditable = false;
  });

  pickName.addEventListener("keydown", (event) => {
    if (event.keyCode === 13 || event.keyCode === 32) {
      event.preventDefault();
    }
  });

  const savedName = localStorage.getItem("pickName");
  if (savedName) {
    pickNameSpans.forEach((span) => span.remove());
    pickName.textContent = savedName;
  }
</script>
